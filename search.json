[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "hypersheets",
    "section": "",
    "text": "Error: ../index_files - The system cannot find the path specified.\nThis file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "hypersheets",
    "section": "Install",
    "text": "Install\npip install hypersheets"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "hypersheets",
    "section": "How to use",
    "text": "How to use\n\nImporting of data\nThe package provides a wrapper for yfinanceâ€™s Yahoo API to allow the downloading of price and return date (based on daily adjusted close)\n\nSPY_prices = hs.utils.download_prices('SPY',  period=\"5y\")\nSPY_returns = hs.utils.download_returns('SPY',  period=\"5y\")\n\nExisting price data data can be easily turned into returns\n\nQQQ_prices = hs.utils.download_prices('QQQ',  period=\"5y\")\nQQQ_returns = hs.utils.prepare_returns(QQQ_prices)\n\n\n\nAnalysis\nPrebuilt reports functions allow for the quick analysis of stock performance\n\n# hs.reports.plots(SPY_returns, QQQ_returns, display=True)\n\nMore detailed html tearsheets can also be produced:\n\nhs.reports.html(SPY_returns, QQQ_returns, returns_title = 'SPY', benchmark_title = 'QQQ', download_filename = 'Example_Tearsheet.html', output = False)\n\n\n\nMore infomation\nA full list of methods can be generated by:\n\nhs.utils.__all__\n\n['mtd',\n 'qtd',\n 'ytd',\n 'pandas_date',\n 'pandas_current_month',\n 'multi_shift',\n 'to_excess_returns',\n 'prepare_returns',\n 'to_returns',\n 'to_prices',\n 'to_log_returns',\n 'log_returns',\n 'exponential_stdev',\n 'download_prices',\n 'download_returns',\n 'prepare_benchmark',\n 'rebase',\n 'group_returns',\n 'aggregate_returns',\n 'prepare_prices',\n 'round_to_closest',\n 'file_stream',\n 'make_index',\n 'make_portfolio']"
  },
  {
    "objectID": "stats.html",
    "href": "stats.html",
    "title": "Stats",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "stats.html#comparing-against-a-benchmark",
    "href": "stats.html#comparing-against-a-benchmark",
    "title": "Stats",
    "section": "Comparing against a benchmark",
    "text": "Comparing against a benchmark\n\nsource\n\nr_squared\n\n r_squared (returns, benchmark, prepare_returns=True)\n\nMeasures the straight line fit of the equity curve\n\nSPY = _utils.download_prices('SPY', '5y')\nr_squared(SPY, 'QQQ')\n\n0.8657597594693889\n\n\n\nsource\n\n\nr2\n\n r2 (returns, benchmark)\n\nShorthand for r_squared()\n\nsource\n\n\ninformation_ratio\n\n information_ratio (returns, benchmark, prepare_returns=True)\n\nCalculates the information ratio (basically the risk return ratio of the net profits)\n\nSPY = _utils.download_prices('SPY', '5y')\ninformation_ratio(SPY, 'QQQ')\n\n-0.034145732893584566\n\n\n\nsource\n\n\ngreeks\n\n greeks (returns, benchmark, periods=252.0, prepare_returns=True)\n\nCalculates alpha and beta of the portfolio\n\nSPY = _utils.download_prices('SPY', '5y')\ngreeks(SPY, 'QQQ')\n\nbeta     0.766525\nalpha   -0.014009\ndtype: float64\n\n\n\nsource\n\n\nrolling_greeks\n\n rolling_greeks (returns, benchmark, periods=252, prepare_returns=True)\n\nCalculates rolling alpha and beta of the portfolio\n\nSPY = _utils.download_prices('SPY', '5y')\nrolling_greeks(SPY, 'QQQ').tail(10)\n\n\n\n\n\n  \n    \n      \n      beta\n      alpha\n    \n    \n      Date\n      \n      \n    \n  \n  \n    \n      2022-09-16\n      0.711193\n      -0.000020\n    \n    \n      2022-09-19\n      0.711200\n      -0.000020\n    \n    \n      2022-09-20\n      0.711199\n      -0.000020\n    \n    \n      2022-09-21\n      0.712228\n      -0.000020\n    \n    \n      2022-09-22\n      0.711855\n      -0.000020\n    \n    \n      2022-09-23\n      0.712161\n      -0.000020\n    \n    \n      2022-09-26\n      0.712399\n      -0.000020\n    \n    \n      2022-09-27\n      0.712574\n      -0.000020\n    \n    \n      2022-09-28\n      0.713869\n      -0.000021\n    \n    \n      2022-09-29\n      0.714026\n      -0.000021\n    \n  \n\n\n\n\n\nsource\n\n\ntreynor_ratio\n\n treynor_ratio (returns, benchmark, periods=252.0, rf=0.0,\n                prepare_returns=True)\n\nCalculates the Treynor ratio Args: * returns (Series, DataFrame): Input return series * benchmatk (String, Series, DataFrame): Benchmark to compare beta to * periods (int): Freq. of returns (252/365 for daily, 12 for monthly)\n\nSPY = _utils.download_prices('SPY', '5y')\ntreynor_ratio(SPY, 'QQQ')\n\n0.7394830437816903\n\n\n\nsource\n\n\ncompare\n\n compare (returns, benchmark, aggregate=None, compounded=True,\n          round_vals=None, prepare_returns=True)\n\nCompare returns to benchmark on a day/week/month/quarter/year basis\n\nSPY = _utils.download_returns('SPY', '5y')\ncompare(SPY, 'QQQ', aggregate = 'M').tail(12)\n\n\n\n\n\n  \n    \n      \n      Returns\n      Benchmark\n      Multiplier\n      Won\n    \n  \n  \n    \n      (2021, 10)\n      7.016350\n      7.864013\n      0.892210\n      -\n    \n    \n      (2021, 11)\n      -0.803480\n      1.996842\n      -0.402376\n      -\n    \n    \n      (2021, 12)\n      4.624778\n      1.152342\n      4.013372\n      +\n    \n    \n      (2022, 1)\n      -5.274126\n      -8.747021\n      0.602963\n      +\n    \n    \n      (2022, 2)\n      -2.951699\n      -4.475968\n      0.659455\n      +\n    \n    \n      (2022, 3)\n      3.759043\n      4.667878\n      0.805300\n      -\n    \n    \n      (2022, 4)\n      -8.776911\n      -13.595739\n      0.645563\n      +\n    \n    \n      (2022, 5)\n      0.225728\n      -1.586593\n      -0.142272\n      +\n    \n    \n      (2022, 6)\n      -8.246043\n      -8.907885\n      0.925702\n      +\n    \n    \n      (2022, 7)\n      9.208745\n      12.551730\n      0.733663\n      -\n    \n    \n      (2022, 8)\n      -4.080199\n      -5.132186\n      0.795022\n      +\n    \n    \n      (2022, 9)\n      -7.819145\n      -8.992359\n      0.869532\n      +\n    \n  \n\n\n\n\nNote that these returns are already formatted in percentage terms\n\nsource\n\n\nmonthly_returns\n\n monthly_returns (returns, eoy=True, compounded=True,\n                  prepare_returns=True)\n\nCalculates monthly returns\n\nSPY = _utils.download_prices('SPY', '5Y')\nmonthly_returns(SPY)\n\n\n\n\n\n  \n    \n      \n      JAN\n      FEB\n      MAR\n      APR\n      MAY\n      JUN\n      JUL\n      AUG\n      SEP\n      OCT\n      NOV\n      DEC\n      EOY\n    \n  \n  \n    \n      2017\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.019142\n      0.030566\n      0.012128\n      0.063031\n    \n    \n      2018\n      0.056359\n      -0.036360\n      -0.027411\n      0.005168\n      0.024309\n      0.005751\n      0.037047\n      0.031920\n      0.005945\n      -0.069104\n      0.018549\n      -0.088049\n      -0.045690\n    \n    \n      2019\n      0.080066\n      0.032416\n      0.018100\n      0.040852\n      -0.063771\n      0.069586\n      0.015119\n      -0.016743\n      0.019458\n      0.022105\n      0.036198\n      0.029055\n      0.312239\n    \n    \n      2020\n      -0.000404\n      -0.079166\n      -0.124871\n      0.126983\n      0.047645\n      0.017735\n      0.058892\n      0.069797\n      -0.037444\n      -0.024933\n      0.108777\n      0.037049\n      0.183316\n    \n    \n      2021\n      -0.010191\n      0.027805\n      0.045399\n      0.052911\n      0.006566\n      0.022427\n      0.024413\n      0.029760\n      -0.046605\n      0.070163\n      -0.008035\n      0.046248\n      0.287287\n    \n    \n      2022\n      -0.052741\n      -0.029517\n      0.037590\n      -0.087769\n      0.002257\n      -0.082460\n      0.092087\n      -0.040802\n      -0.078191\n      0.000000\n      0.000000\n      0.000000\n      -0.227324"
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "Utils",
    "section": "",
    "text": "source\n\nmtd\n\n mtd (df)\n\nRestrict a dataframe to only month to date\n\nsource\n\n\nqtd\n\n qtd (df)\n\nRestrict a dataframe to only quarter to date (quarters starting in Jan, Apr, Jun, Oct)\n\nsource\n\n\nytd\n\n ytd (df)\n\nRestrict a dataframe to only year to date\n\nsource\n\n\npandas_date\n\n pandas_date (df, dates)\n\nFilters a dataframe (with date as the index), to its values on specific days\n\ndf = pd.DataFrame({\n    'name': ['alice','bob','charlie','ryan'],\n    'DoB': ['2005-10-15','2002-09-03','2001-01-01','1999-12-31']\n})\ndf = df.set_index('DoB')\ndates = ['2001-01-01','2005-10-15']\npandas_date(df, dates)\n\n\n\n\n\n  \n    \n      \n      name\n    \n    \n      DoB\n      \n    \n  \n  \n    \n      2005-10-15\n      alice\n    \n    \n      2001-01-01\n      charlie\n    \n  \n\n\n\n\n\nsource\n\n\npandas_current_month\n\n pandas_current_month (df)\n\nan alternative method to mtd. remove?\n\nsource\n\n\nmulti_shift\n\n multi_shift (df, shift=3)\n\nGet last N rows relative to another row in dataframe of values, with a sorted index\n\ndf = pd.DataFrame({\n    'value': [10,15,13,7,12,6],\n    'Date': ['1999-10-15','1999-10-16','1999-10-17','1999-10-18','1999-10-19','1999-10-20']\n})\ndf = df.set_index('Date')\nmulti_shift(df,3)\n\n\n\n\n\n  \n    \n      \n      value\n      value1\n      value2\n    \n    \n      Date\n      \n      \n      \n    \n  \n  \n    \n      1999-10-15\n      10\n      NaN\n      NaN\n    \n    \n      1999-10-16\n      15\n      10.0\n      NaN\n    \n    \n      1999-10-17\n      13\n      15.0\n      10.0\n    \n    \n      1999-10-18\n      7\n      13.0\n      15.0\n    \n    \n      1999-10-19\n      12\n      7.0\n      13.0\n    \n    \n      1999-10-20\n      6\n      12.0\n      7.0\n    \n  \n\n\n\n\n\nsource\n\n\nto_excess_returns\n\n to_excess_returns\n                    (returns:Union[ForwardRef('~pd.Series'),ForwardRef('~p\n                    d.DataFrame')], rf:Union[float,ForwardRef('~pd.Series'\n                    ),ForwardRef('~pd.DataFrame')], nperiods:int=None)\n\nCalculates excess returns by subtracting risk-free returns from total returns\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nreturns\nUnion\n\nReturns\n\n\nrf\nUnion\n\nRisk-Free rate(s)\n\n\nnperiods\nint\nNone\nWill convert rf to different frequency using deannualize\n\n\nReturns\nUnion\n\nReturns - risk free rate\n\n\n\n\nsource\n\n\nprepare_returns\n\n prepare_returns (data, rf=0.0, nperiods=None)\n\nConverts price data into returns + cleanup\n\nsource\n\n\nto_returns\n\n to_returns (prices, rf=0.0)\n\nCalculates the simple arithmetic returns of a price series\n\nsource\n\n\nto_prices\n\n to_prices (returns, base=100000.0)\n\nConverts returns series to price data\n\n# mock returns array\ndata = np.array([0.1, -0.2, 0.25, 0.5, -0.8])\nreturns = pd.Series(data)\n\n\nto_prices(returns, base=100)\n\n0    110.0\n1     88.0\n2    110.0\n3    165.0\n4     33.0\ndtype: float64\n\n\n\nsource\n\n\nto_log_returns\n\n to_log_returns (returns, rf=0.0, nperiods=None)\n\nConverts returns series to log returns\nThe log return is defined as \\(lr_{i}=\\log\\frac{p_{i}}{p_{i-1}}\\) where \\(lr_{i}\\) and \\(p_{i}\\) are the log returns and price on day \\(i\\) respectively\n\nsource\n\n\nlog_returns\n\n log_returns (returns, rf=0.0, nperiods=None)\n\nShorthand for to_log_returns\n\nsource\n\n\nexponential_stdev\n\n exponential_stdev (returns, window=30, is_halflife=False)\n\nReturns series representing exponential volatility of returns\n\nsource\n\n\ndownload_prices\n\n download_prices (ticker, period='max')\n\ndownload daily adjusted close prices from yahoo\n\ndownload_prices('SPY',  period=\"5y\").tail(10)\n\nDate\n2022-09-16    385.559998\n2022-09-19    388.549988\n2022-09-20    384.089996\n2022-09-21    377.390015\n2022-09-22    374.220001\n2022-09-23    367.950012\n2022-09-26    364.309998\n2022-09-27    363.380005\n2022-09-28    370.529999\n2022-09-29    362.790009\nName: Close, dtype: float64\n\n\n\nsource\n\n\ndownload_returns\n\n download_returns (ticker, period='max')\n\ndownload returns from yahoo\n\ndownload_returns('SPY',  period=\"5y\").tail(10)\n\nDate\n2022-09-16   -0.007629\n2022-09-19    0.007755\n2022-09-20   -0.011479\n2022-09-21   -0.017444\n2022-09-22   -0.008400\n2022-09-23   -0.016755\n2022-09-26   -0.009893\n2022-09-27   -0.002553\n2022-09-28    0.019676\n2022-09-29   -0.020889\nName: Close, dtype: float64\n\n\n\nsource\n\n\nprepare_benchmark\n\n prepare_benchmark (benchmark=None, period='max', rf=0.0,\n                    prep_returns=True)\n\nFetch benchmark if ticker is provided, and pass through prepare_returns() period can be options or (expected) pd.DatetimeIndex range\n\nprepare_benchmark('SPY',  period=\"5y\").tail(10)\n\nDate\n2022-09-16   -0.007629\n2022-09-19    0.007755\n2022-09-20   -0.011479\n2022-09-21   -0.017444\n2022-09-22   -0.008400\n2022-09-23   -0.016755\n2022-09-26   -0.009893\n2022-09-27   -0.002553\n2022-09-28    0.019676\n2022-09-29   -0.020889\nName: Close, dtype: float64\n\n\n\nsource\n\n\nrebase\n\n rebase (prices, base=100.0)\n\nRebase all series to a given intial base. This makes comparing/plotting different series together easier. Args: * prices: Expects a price series/dataframe * base (number): starting value for all series.\n\nprices = download_prices('SPY',  period=\"5y\")\nrebase(prices, 100).head(10)\n\nDate\n2017-10-02    100.000000\n2017-10-03    100.214005\n2017-10-04    100.332908\n2017-10-05    100.927388\n2017-10-06    100.812445\n2017-10-09    100.645994\n2017-10-10    100.911539\n2017-10-11    101.070056\n2017-10-12    100.919460\n2017-10-13    101.042305\nName: Close, dtype: float64\n\n\n\nsource\n\n\ngroup_returns\n\n group_returns (returns, groupby, compounded=True)\n\nSummarize returns group_returns(df, df.index.year) group_returns(df, [df.index.year, df.index.month])\n\nreturns = download_returns('SPY',  period=\"1y\")\ngroup_returns(returns, [returns.index.year,returns.index.month])\n\nDate  Date\n2021  9       0.000000\n      10      0.070163\n      11     -0.008035\n      12      0.046248\n2022  1      -0.052741\n      2      -0.029517\n      3       0.037590\n      4      -0.087769\n      5       0.002257\n      6      -0.082460\n      7       0.092087\n      8      -0.040802\n      9      -0.078191\nName: Close, dtype: float64\n\n\nNote that for year and month, it creates a multicolumns index\n\nsource\n\n\naggregate_returns\n\n aggregate_returns (returns, period=None, compounded=True)\n\nAggregates returns based on date periods, and flattens index\n\nreturns = download_returns('SPY',  period=\"1y\")\naggregate_returns(returns, 'M')\n\n(2021, 9)     0.000000\n(2021, 10)    0.070164\n(2021, 11)   -0.008035\n(2021, 12)    0.046248\n(2022, 1)    -0.052741\n(2022, 2)    -0.029517\n(2022, 3)     0.037590\n(2022, 4)    -0.087769\n(2022, 5)     0.002257\n(2022, 6)    -0.082460\n(2022, 7)     0.092087\n(2022, 8)    -0.040802\n(2022, 9)    -0.078191\nName: Close, dtype: float64\n\n\n\nsource\n\n\nprepare_prices\n\n prepare_prices (data, base=1.0)\n\nConverts return data into prices + cleanup\n\nsource\n\n\nround_to_closest\n\n round_to_closest (val, res, decimals=None)\n\nRound to closest resolution\n\nsource\n\n\nfile_stream\n\n file_stream ()\n\nReturns a file stream\n\nsource\n\n\nmake_index\n\n make_index (ticker_weights:dict, rebalance='1M', period:str='max',\n             returns:Union[ForwardRef('pd.Series'),ForwardRef('pd.DataFram\n             e')]=None, match_dates:bool=False)\n\nMakes an index out of the given tickers and weights. Optionally you can pass a dataframe with the returns. If returns is not given it try to download them with yfinance\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nticker_weights\ndict\n\nA python dict with tickers as keys and weights as values\n\n\nrebalance\nstr\n1M\nPandas resample interval or None for never\n\n\nperiod\nstr\nmax\ntime period of the returns to be downloaded\n\n\nreturns\nUnion\nNone\nReturns: If provided, check if returns for the ticker are in this dataframe, before trying to download from yahoo\n\n\nmatch_dates\nbool\nFalse\nwhether to match dates?\n\n\nReturns\nUnion\n\nReturns for the index\n\n\n\n\nmake_index({'SPY':0.5, 'QQQ':0.5}, period = '5y').tail(10)\n\nC:\\Users\\kirpa\\AppData\\Local\\Temp\\ipykernel_14216\\3101533360.py:62: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n  return index[index.index <= last_day].sum(axis=1)\n\n\nDate\n2022-09-16   -0.013744\n2022-09-19    0.015542\n2022-09-20   -0.019450\n2022-09-21   -0.035350\n2022-09-22   -0.020708\n2022-09-23   -0.033036\n2022-09-26   -0.014031\n2022-09-27   -0.002152\n2022-09-28    0.039568\n2022-09-29   -0.049717\ndtype: float64\n\n\n\nsource\n\n\nmake_portfolio\n\n make_portfolio (returns, start_balance=100000.0, mode='comp',\n                 round_to=None)\n\nCalculates compounded value of portfolio"
  },
  {
    "objectID": "plots.html",
    "href": "plots.html",
    "title": "Plotting Function",
    "section": "",
    "text": "source\n\nto_plotly\n\n to_plotly (fig)\n\n\nsource\n\n\nsnapshot\n\n snapshot (returns, grayscale=False, figsize=(10, 8), title='Portfolio\n           Summary', fontname='Arial', lw=1.5, mode='comp', subtitle=True,\n           savefig=None, show=True, log_scale=False)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nsnapshot(values)\n\n\n\n\n\nsource\n\n\nearnings\n\n earnings (returns, start_balance=100000.0, mode='comp', grayscale=False,\n           figsize=(10, 6), title='Portfolio Earnings', fontname='Arial',\n           lw=1.5, subtitle=True, savefig=None, show=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nearnings(values)\n\n\n\n\n\nsource\n\n\nreturns\n\n returns (returns, benchmark=None, grayscale=False, figsize=(10, 6),\n          returns_label='Strategy', benchmark_label='Benchmark',\n          fontname='Arial', lw=1.5, match_volatility=False, compound=True,\n          cumulative=True, resample=None, ylabel='Cumulative Returns',\n          subtitle=True, savefig=None, show=True, prepare_returns=False)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nreturns(values, benchmark, returns_label=\"SPY\", benchmark_label=\"QQQ\")\n\n\n\n\n\nsource\n\n\ndaily_returns\n\n daily_returns (returns, grayscale=False, figsize=(10, 4),\n                fontname='Arial', lw=0.5, log_scale=False,\n                ylabel='Returns', subtitle=True, savefig=None, show=True,\n                prepare_returns=True)\n\n\nsource\n\n\nlog_returns\n\n log_returns (returns, benchmark=None, grayscale=False, figsize=(10, 5),\n              returns_label='Strategy', benchmark_label='Benchmark',\n              fontname='Arial', lw=1.5, match_volatility=False,\n              compound=True, cumulative=True, resample=None,\n              ylabel='Cumulative Returns', subtitle=True, savefig=None,\n              show=True, prepare_returns=False)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nlog_returns(values, benchmark, returns_label=\"SPY\", benchmark_label=\"QQQ\")\n\n\n\n\n\nsource\n\n\nyearly_returns\n\n yearly_returns (returns, benchmark=None, returns_label='Strategy',\n                 benchmark_label='Benchmark', fontname='Arial',\n                 grayscale=False, hlw=1.5, hlcolor='red', hllabel='',\n                 match_volatility=False, log_scale=False, figsize=(10, 5),\n                 ylabel=True, subtitle=True, compounded=True,\n                 savefig=None, show=True, prepare_returns=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nyearly_returns(values, benchmark, returns_label=\"SPY\", benchmark_label=\"QQQ\")\n\n\n\n\n\nsource\n\n\ndistribution\n\n distribution (returns, fontname='Arial', grayscale=False, ylabel=True,\n               figsize=(10, 6), subtitle=True, compounded=True,\n               savefig=None, show=True, prepare_returns=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\ndistribution(values)\n\n\n\n\n\nsource\n\n\nhistogram\n\n histogram (returns, resample='M', fontname='Arial', grayscale=False,\n            figsize=(10, 5), ylabel=True, subtitle=True, compounded=True,\n            savefig=None, show=True, prepare_returns=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nhistogram(values)\n\n\n\n\n\nsource\n\n\ndrawdown\n\n drawdown (returns, grayscale=False, figsize=(10, 3), fontname='Arial',\n           lw=1, log_scale=False, match_volatility=False, compound=False,\n           ylabel='Drawdown', resample=None, subtitle=True, savefig=None,\n           show=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\ndrawdown(values)\n\n\n\n\n\nsource\n\n\ndrawdowns_periods\n\n drawdowns_periods (returns, periods=5, lw=1.5, log_scale=False,\n                    fontname='Arial', grayscale=False, figsize=(10, 5),\n                    ylabel=True, subtitle=True, compounded=True,\n                    savefig=None, show=True, prepare_returns=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\ndrawdowns_periods(values)\n\n\n\n\n\nsource\n\n\nrolling_beta\n\n rolling_beta (returns, benchmark, benchmark_label='Benchmark',\n               window1=126, window1_label='6-Months', window2=252,\n               window2_label='12-Months', lw=1.5, fontname='Arial',\n               grayscale=False, figsize=(10, 3), ylabel=True,\n               subtitle=True, savefig=None, show=True,\n               prepare_returns=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nrolling_beta(values, benchmark)\n\n\n\n\n\nsource\n\n\nrolling_volatility\n\n rolling_volatility (returns, benchmark=None, returns_label='Strategy',\n                     benchmark_label='Benchmark', period=126,\n                     period_label='6-Months', periods_per_year=252,\n                     lw=1.5, fontname='Arial', grayscale=False,\n                     figsize=(10, 3), ylabel='Volatility', subtitle=True,\n                     savefig=None, show=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nrolling_volatility(values, benchmark)\n\n\n\n\n\nsource\n\n\nrolling_sharpe\n\n rolling_sharpe (returns, benchmark=None, rf=0.0,\n                 returns_label='Strategy', benchmark_label='Benchmark',\n                 period=126, period_label='6-Months',\n                 periods_per_year=252, lw=1.25, fontname='Arial',\n                 grayscale=False, figsize=(10, 3), ylabel='Sharpe',\n                 subtitle=True, savefig=None, show=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nrolling_sharpe(values, benchmark)\n\n\n\n\n\nsource\n\n\nrolling_sortino\n\n rolling_sortino (returns, benchmark=None, rf=0.0,\n                  returns_label='Strategy', benchmark_label='Benchmark',\n                  period=126, period_label='6-Months',\n                  periods_per_year=252, lw=1.25, fontname='Arial',\n                  grayscale=False, figsize=(10, 3), ylabel='Sortino',\n                  subtitle=True, savefig=None, show=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nrolling_sortino(values, benchmark)\n\n\n\n\n\nsource\n\n\nmonthly_heatmap\n\n monthly_heatmap (returns, annot_size=10, figsize=(10, 5), cbar=True,\n                  square=False, compounded=True, eoy=False,\n                  grayscale=False, fontname='Arial', ylabel=True,\n                  savefig=None, show=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nmonthly_heatmap(values, eoy=True)\n\n\n\n\n\nsource\n\n\noutperformance_heatmap\n\n outperformance_heatmap (returns, benchmark=None, annot_size=10,\n                         figsize=(10, 5), cbar=True, square=False,\n                         benchmark_label='Benchmark', compounded=True,\n                         eoy=False, grayscale=False, fontname='Arial',\n                         ylabel=True, savefig=None, show=True)\n\n\nvalues = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\noutperformance_heatmap(values, benchmark)\n\n\n\n\n\nsource\n\n\nmonthly_returns\n\n monthly_returns (returns, annot_size=10, figsize=(10, 5), cbar=True,\n                  square=False, compounded=True, eoy=False,\n                  grayscale=False, fontname='Arial', ylabel=True,\n                  savefig=None, show=True)\n\nA wrapper for monthly heatmaps"
  },
  {
    "objectID": "core_plots.html",
    "href": "core_plots.html",
    "title": "Core Plots",
    "section": "",
    "text": "source\n\nformat_pct_axis\n\n format_pct_axis (x, _)\n\n\nsource\n\n\nformat_cur_axis\n\n format_cur_axis (x, _)\n\n\nsource\n\n\nplot_returns_bars\n\n plot_returns_bars (returns, benchmark=None, returns_label='Strategy',\n                    benchmark_label='Benchmark', hline=None, hlw=None,\n                    hlcolor='red', hllabel='', resample='A',\n                    title='Returns', match_volatility=False,\n                    log_scale=False, figsize=(10, 6), grayscale=False,\n                    fontname='Arial', ylabel=True, subtitle=True,\n                    savefig=None, show=True)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nplot_returns_bars(returns, benchmark, returns_label=\"SPY\", benchmark_label=\"QQQ\")\n\n\n\n\n\nsource\n\n\nplot_timeseries\n\n plot_timeseries (returns, benchmark=None, title='Returns',\n                  compound=False, cumulative=True, fill=False,\n                  returns_label='Strategy', benchmark_label='Benchmark',\n                  hline=None, hlw=None, hlcolor='red', hllabel='',\n                  percent=True, match_volatility=False, log_scale=False,\n                  resample=None, lw=1.5, figsize=(10, 6), ylabel='',\n                  grayscale=False, fontname='Arial', subtitle=True,\n                  savefig=None, show=True)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nplot_timeseries(returns, benchmark, compound = True, returns_label=\"SPY\", benchmark_label=\"QQQ\")\n\n\n\n\n\nsource\n\n\nplot_histogram\n\n plot_histogram (returns, resample='M', bins=20, fontname='Arial',\n                 grayscale=False, title='Returns', kde=True, figsize=(10,\n                 6), ylabel=True, subtitle=True, compounded=True,\n                 savefig=None, show=True)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nplot_histogram(returns)\n\n\n\n\n\nsource\n\n\nplot_rolling_stats\n\n plot_rolling_stats (returns, benchmark=None, title='',\n                     returns_label='Strategy',\n                     benchmark_label='Benchmark', hline=None, hlw=None,\n                     hlcolor='red', hllabel='', lw=1.5, figsize=(10, 6),\n                     ylabel='', grayscale=False, fontname='Arial',\n                     subtitle=True, savefig=None, show=True)\n\n\nreturns = _stats.rolling_volatility(_utils.download_returns('SPY', '5y'))\nplot_rolling_stats(returns, title = 'Rolling Volatility', hline=returns.mean(), hlw=1.5)\n\n\n\n\n\nsource\n\n\nplot_rolling_beta\n\n plot_rolling_beta (returns, benchmark, window1=126, window1_label='',\n                    window2=None, window2_label='', title='',\n                    hlcolor='red', figsize=(10, 6), grayscale=False,\n                    fontname='Arial', lw=1.5, ylabel=True, subtitle=True,\n                    savefig=None, show=True)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nplot_rolling_beta(returns, benchmark, title=\"Rolling Beta\", window1_label='126 days', window2=252, window2_label='252 days')\n\n\n\n\n\nsource\n\n\nplot_longest_drawdowns\n\n plot_longest_drawdowns (returns, periods=5, lw=1.5, fontname='Arial',\n                         grayscale=False, log_scale=False, figsize=(10,\n                         6), ylabel=True, subtitle=True, compounded=True,\n                         savefig=None, show=True)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nplot_longest_drawdowns(returns)\n\n\n\n\n\nsource\n\n\nplot_distribution\n\n plot_distribution (returns, figsize=(10, 6), fontname='Arial',\n                    grayscale=False, ylabel=True, subtitle=True,\n                    compounded=True, savefig=None, show=True)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nplot_distribution(returns)\n\n\n\n\n\nsource\n\n\nplot_table\n\n plot_table (tbl, columns=None, title='', title_loc='left', header=True,\n             colWidths=None, rowLoc='right', colLoc='right',\n             colLabels=None, edges='horizontal', orient='horizontal',\n             figsize=(5.5, 6), savefig=None, show=False)\n\n\nvalue = _utils.download_prices('SPY', '5y')\nbecnhmark = _utils.download_prices('QQQ', '5y')\ntable = pd.merge(value, becnhmark, on = 'Date', suffixes = ['_SPY', '_QQQ']).tail(5)\nplot_table(table)"
  },
  {
    "objectID": "reports.html",
    "href": "reports.html",
    "title": "Reports",
    "section": "",
    "text": "source\n\nmetrics\n\n metrics (returns, benchmark=None, rf=0.0, display=True, mode='basic',\n          sep=False, compounded=True, periods_per_year=252,\n          prepare_returns=True, match_dates=False, **kwargs)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\n# âˆš may be encodable\nmetrics(returns, benchmark, returns_title = 'SPY', benchmark_title = 'QQQ')\n\n                    SPY         QQQ\n------------------  ----------  ----------\nStart Period        2017-10-02  2017-10-02\nEnd Period          2022-09-30  2022-09-30\nRisk-Free Rate      0.0%        0.0%\nTime in Market      100.0%      100.0%\n\nCumulative Return   56.11%      92.81%\nCAGR                9.32%       14.04%\n\nSharpe              0.53        0.65\nProb. Sharpe Ratio  88.01%      92.36%\nSortino             0.73        0.89\nSortino/$\\sqrt{2}$  0.51        0.63\nOmega               1.11        1.11\n\nMax Drawdown        -33.72%     -32.65%\nLongest DD Days     269         276\n\nGain/Pain Ratio     0.11        0.13\nGain/Pain (1M)      0.57        0.75\n\nPayoff Ratio        0.85        0.85\nProfit Factor       1.11        1.13\nCommon Sense Ratio  0.92        0.97\nCPC Index           0.52        0.54\nTail Ratio          0.83        0.86\nOutlier Win Ratio   4.46        3.47\nOutlier Loss Ratio  4.57        3.45\n\nMTD                 -8.16%      -9.19%\n3M                  -4.57%      -4.24%\n6M                  -21.02%     -26.65%\nYTD                 -23.02%     -31.48%\n1Y                  -15.54%     -24.02%\n3Y (ann.)           7.97%       12.44%\n5Y (ann.)           9.0%        13.39%\n10Y (ann.)          9.32%       14.04%\nAll-time (ann.)     9.32%       14.04%\n\nAvg. Drawdown       -1.92%      -3.07%\nAvg. Drawdown Days  16          19\nRecovery Factor     1.66        2.84\nUlcer Index         0.08        0.1\nSerenity Index      0.66        0.78\n\n\n\nsource\n\n\nplots\n\n plots (returns, benchmark=None, grayscale=False, figsize=(8, 5),\n        mode='basic', compounded=True, periods_per_year=252,\n        prepare_returns=True, match_dates=False, **kwargs)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nplots(returns, benchmark, returns_title = 'SPY', benchmark_title = 'QQQ', mode = 'full')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nhtml\n\n html (returns, benchmark=None, rf=0.0, grayscale=False, title='Strategy\n       Tearsheet', output=None, compounded=True, periods_per_year=252,\n       download_filename='quantstats-tearsheet.html', figfmt='svg',\n       template_path=None, match_dates=False, **kwargs)\n\nProduction of .html tearsheets\n\nsource\n\n\nfull\n\n full (returns, benchmark=None, rf=0.0, grayscale=False, figsize=(8, 5),\n       display=True, compounded=True, periods_per_year=252,\n       match_dates=False, **kwargs)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nfull(returns, benchmark, display=True, returns_title='SPY', benchmark_title='QQQ')\n\nPerformance Metrics\n\n\n                           SPY         QQQ\n-------------------------  ----------  ----------\nStart Period               2017-10-02  2017-10-02\nEnd Period                 2022-09-30  2022-09-30\nRisk-Free Rate             0.0%        0.0%\nTime in Market             100.0%      100.0%\n\nCumulative Return          56.13%      92.85%\nCAGR                       9.32%       14.04%\n\nSharpe                     0.53        0.65\nProb. Sharpe Ratio         88.02%      92.36%\nSmart Sharpe               0.45        0.54\nSortino                    0.73        0.89\nSmart Sortino              0.61        0.75\nSortino/$\\sqrt{2}$         0.51        0.63\nSmart Sortino/$\\sqrt{2}$   0.43        0.53\nOmega                      1.11        1.11\n\nMax Drawdown               -33.72%     -32.65%\nLongest DD Days            269         276\nVolatility (ann.)          20.84%      25.29%\nR^2                        0.87        0.87\nInformation Ratio          -0.03       -0.03\nCalmar                     0.28        0.43\nSkew                       -0.66       -0.48\nKurtosis                   12.01       5.9\n\nExpected Daily %           0.04%       0.05%\nExpected Monthly %         0.04%       0.05%\nExpected Yearly %          0.04%       0.05%\nKelly Criterion            3.1%        5.27%\nRisk of Ruin               0.0%        0.0%\nDaily Value-at-Risk        -2.11%      -2.56%\nExpected Shortfall (cVaR)  -2.11%      -2.56%\n\nMax Consecutive Wins       11          11\nMax Consecutive Losses     8           6\nGain/Pain Ratio            0.11        0.13\nGain/Pain (1M)             0.57        0.75\n\nPayoff Ratio               0.85        0.85\nProfit Factor              1.11        1.13\nCommon Sense Ratio         0.92        0.97\nCPC Index                  0.52        0.54\nTail Ratio                 0.83        0.86\nOutlier Win Ratio          4.46        3.47\nOutlier Loss Ratio         4.57        3.45\n\nMTD                        -8.15%      -9.18%\n3M                         -4.56%      -4.23%\n6M                         -21.01%     -26.63%\nYTD                        -23.01%     -31.46%\n1Y                         -15.53%     -24.01%\n3Y (ann.)                  7.97%       12.45%\n5Y (ann.)                  9.01%       13.4%\n10Y (ann.)                 9.32%       14.04%\nAll-time (ann.)            9.32%       14.04%\n\nBest Day                   9.06%       8.47%\nWorst Day                  -10.94%     -11.98%\nBest Month                 12.7%       14.97%\nWorst Month                -12.49%     -13.6%\nBest Year                  31.22%      48.41%\nWorst Year                 -23.01%     -31.46%\n\nAvg. Drawdown              -1.92%      -3.07%\nAvg. Drawdown Days         16          19\nRecovery Factor            1.66        2.84\nUlcer Index                0.08        0.1\nSerenity Index             0.66        0.78\n\nAvg. Up Month              4.21%       5.31%\nAvg. Down Month            -5.82%      -6.51%\nWin Days %                 55.38%      56.48%\nWin Month %                66.67%      63.33%\nWin Quarter %              70.0%       75.0%\nWin Year %                 66.67%      66.67%\n\nBeta                       0.77        -\nAlpha                      -0.01       -\nCorrelation                93.05%      -\nTreynor Ratio              73.22%      -\n\n\nNone\n\n\n5 Worst Drawdowns\n\n\n\n\n\n\n  \n    \n      \n      Start\n      Valley\n      End\n      Days\n      Max Drawdown\n      99% Max Drawdown\n    \n  \n  \n    \n      1\n      2020-02-20\n      2020-03-23\n      2020-08-10\n      172\n      -33.717262\n      -29.109770\n    \n    \n      2\n      2022-01-04\n      2022-09-30\n      2022-09-30\n      269\n      -23.448751\n      -23.052213\n    \n    \n      3\n      2018-09-21\n      2018-12-24\n      2019-04-12\n      203\n      -19.348908\n      -15.952035\n    \n    \n      4\n      2018-01-29\n      2018-02-08\n      2018-08-06\n      189\n      -10.101877\n      -9.594681\n    \n    \n      5\n      2020-09-03\n      2020-09-23\n      2020-11-11\n      69\n      -9.440438\n      -9.199067\n    \n  \n\n\n\n\nStrategy Visualization\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nbasic\n\n basic (returns, benchmark=None, rf=0.0, grayscale=False, figsize=(8, 5),\n        display=True, compounded=True, periods_per_year=252,\n        match_dates=False, **kwargs)\n\n\nreturns = _utils.download_returns('SPY', '5y')\nbenchmark = _utils.download_returns('QQQ', '5y')\nbasic(returns, benchmark, display=True)\n\nPerformance Metrics\n\n\n                    Close       Close\n------------------  ----------  ----------\nStart Period        2017-10-02  2017-10-02\nEnd Period          2022-09-30  2022-09-30\nRisk-Free Rate      0.0%        0.0%\nTime in Market      100.0%      100.0%\n\nCumulative Return   56.11%      92.86%\nCAGR                9.32%       14.05%\n\nSharpe              0.53        0.65\nProb. Sharpe Ratio  88.01%      92.37%\nSortino             0.73        0.89\nSortino/$\\sqrt{2}$  0.51        0.63\nOmega               1.11        1.11\n\nMax Drawdown        -33.72%     -32.65%\nLongest DD Days     269         276\n\nGain/Pain Ratio     0.11        0.13\nGain/Pain (1M)      0.57        0.76\n\nPayoff Ratio        0.85        0.85\nProfit Factor       1.11        1.13\nCommon Sense Ratio  0.92        0.97\nCPC Index           0.52        0.54\nTail Ratio          0.83        0.86\nOutlier Win Ratio   4.46        3.47\nOutlier Loss Ratio  4.57        3.45\n\nMTD                 -8.16%      -9.17%\n3M                  -4.57%      -4.22%\n6M                  -21.02%     -26.63%\nYTD                 -23.02%     -31.46%\n1Y                  -15.54%     -24.0%\n3Y (ann.)           7.97%       12.45%\n5Y (ann.)           9.0%        13.4%\n10Y (ann.)          9.32%       14.05%\nAll-time (ann.)     9.32%       14.05%\n\nAvg. Drawdown       -1.92%      -3.07%\nAvg. Drawdown Days  16          19\nRecovery Factor     1.66        2.84\nUlcer Index         0.08        0.1\nSerenity Index      0.66        0.78\n\n\nStrategy Visualization"
  }
]